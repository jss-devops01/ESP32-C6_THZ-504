esphome:
  includes:
    - src/callback_handler.h
    - src/communication.h
    - src/mapper.h
    - src/mapper.cpp
    - src/property.h
    - src/property.cpp
    - src/simple_variant.h
    - src/type.h
    - src/type.cpp
    - src/util.h
  platformio_options:
    build_flags:
      - "-DESPCLIENT_ID=$espclient_can_id"
      - "-DMANAGER_ID=$manager_can_id"
      - "-DKESSEL_ID=$kessel_can_id"
      - "-DHK1_ID=$hk1_can_id"
      - "-DHK2_ID=$hk2_can_id"

substitutions:
  # Timing intervals
  interval_very_fast: 15s
  interval_fast: 30s
  interval_medium: 60s
  interval_slow: 5min
  interval_very_slow: 15min
  interval_once_in_a_while: 1h

  # CAN bus IDs
  kessel_can_id: "0x180"
  hk1_can_id: "0x301"
  hk2_can_id: "0x302"
  manager_can_id: "0x6a1"
  espclient_can_id: "0x6a2"

  # Home Assistant entities
  entity_room_temperature: "sensor.durchschnittstemperatur_haus_ohne_keller"
  entity_humidity: "sensor.durchschnitt_luftfeuchtigkeit_haus"

#########################################
#                                       #
#   Global variables                    #
#                                       #
#########################################
globals:
  - id: gRAUMISTTEMP
    type: float
    initial_value: "0.0"
  - id: gRAUMFEUCHTE
    type: float
    initial_value: "0.0"
  - id: gCOP_WW_TAG
    type: float
    initial_value: "1.0"
  - id: gCOP_HEIZ_TAG
    type: float
    initial_value: "1.0"

#########################################
#                                       #
#   Time Synchronization                #
#                                       #
#########################################
time:
  - platform: sntp
    id: sntp_time
    timezone: CET-1CEST,M3.5.0,M10.5.0/3
    update_interval: 15min
    servers:
      - 0.pool.ntp.org
      - 1.pool.ntp.org
      - 2.pool.ntp.org
    on_time:
      - seconds: 0
        minutes: 0
        hours: 3 # sync at 3 am should be ok even with switch from/to daylight saving time
        then:
          - lambda: |-
              syncTime();
      # Energy calculation schedules - every hour, every 5 minutes starting at 4th minute
      - seconds: 0
        minutes: 4/5
        then:
          - lambda: |-
              // Queue energy-related property requests for all sensors
              queueRequest(Kessel, Property::kEL_ENERGIEAUFNAHME_WW_TAG_WH);
              queueRequest(Kessel, Property::kEL_ENERGIEAUFNAHME_WW_TAG_KWH);
              queueRequest(Kessel, Property::kEL_ENERGIEAUFNAHME_HEIZ_TAG_WH);
              queueRequest(Kessel, Property::kEL_ENERGIEAUFNAHME_HEIZ_TAG_KWH);
              queueRequest(Kessel, Property::kWAERMEERTRAG_WW_TAG_WH);
              queueRequest(Kessel, Property::kWAERMEERTRAG_WW_TAG_KWH);
              queueRequest(Kessel, Property::kWAERMEERTRAG_HEIZ_TAG_WH);
              queueRequest(Kessel, Property::kWAERMEERTRAG_HEIZ_TAG_KWH);
      # At midnight reset daily energy consumptions and save offsets
      - seconds: 0
        minutes: 0
        hours: 0
        then:
          - lambda: |-
              // Reset daily energy offsets for the next day
              id(gOFFSET_EL_ENERGIEAUFNAHME_WW_TAG_WH) = id(EL_ENERGIEAUFNAHME_WW_TAG_WH).raw_state * 0.001;
              id(gOFFSET_EL_ENERGIEAUFNAHME_HEIZ_TAG_WH) = id(EL_ENERGIEAUFNAHME_HEIZ_TAG_WH).raw_state * 0.001;
              id(gOFFSET_WAERMEERTRAG_WW_TAG_WH) = id(WAERMEERTRAG_WW_TAG_WH).raw_state * 0.001;
              id(gOFFSET_WAERMEERTRAG_HEIZ_TAG_WH) = id(WAERMEERTRAG_HEIZ_TAG_WH).raw_state * 0.001;
          - sensor.template.publish:
              id: EL_ENERGIEAUFNAHME_WW_SUMME_KWH
              state: 0.0
          - sensor.template.publish:
              id: EL_ENERGIEAUFNAHME_HEIZ_SUMME_KWH
              state: 0.0
          - sensor.template.publish:
              id: WAERMEERTRAG_WW_TAG_SUMME_KWH
              state: 0.0
          - sensor.template.publish:
              id: WAERMEERTRAG_HEIZ_TAG_SUMME_KWH
              state: 0.0

#########################################
#                                       #
#   Buttons                             #
#                                       #
#########################################
button:
  - platform: template
    name: Synchronize Time
    on_press:
      then:
        - lambda: |-
            syncTime();

#########################################
#                                       #
#   Intervals                           #
#                                       #
#########################################
interval:
  - interval: 250ms
    then:
      - lambda: |-
          // Request sensor value one after another.
          if(!conditionalRequests.empty()) {
            // find the next request of which the condition evaluates to true
            auto it = std::find_if(conditionalRequests.begin(),conditionalRequests.end(),[](const auto& element){
              return element._condition();
            });
            if(it != conditionalRequests.end()) {
                requestData(it->_request.first, it->_request.second);
                conditionalRequests.erase(it);
            }
          }
  - interval: $interval_medium
    then:
      - lambda: |-
          // Send current RAUMISTTEMP
          const auto room_temp = id(gRAUMISTTEMP);
          if(room_temp > 0.0f) {
            ESP_LOGI("SET", "Sending cached room temperature %f to heatpump", room_temp);
            sendData(HK1, Property::kRAUMISTTEMP, static_cast<std::uint16_t>(room_temp * 10.0f));
          }
          // Send current RAUMFEUCHTE
          const auto humidity = id(gRAUMFEUCHTE);
          if(humidity > 0.0) {
            ESP_LOGI("SET", "Sending cached humidity %f to heatpump", humidity);
            sendData(HK1, Property::kRAUMFEUCHTE, static_cast<std::uint16_t>(humidity * 10.0f));
          }

#########################################
#                                       #
#   Packages                            #
#                                       #
#########################################
# Package includes removed - handled by wp_base.yaml instead to avoid ID conflicts


#########################################
#                                       #
#   Home Assistant Actions              #
#                                       #
#########################################
api:
  actions:
    - action: can_send_raw_data
      variables:
        data: int[]
      then:
        - lambda: |-
            if(data.size() != 7U) {
              ESP_LOGE("ACTION", "Data is expected to have 7 elements, but has %zd .", data.size());
              return;
            }
            ESP_LOGI("ACTION", "Sending data (0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x)", data[0], data[1], data[2], data[3], data[4], data[5], data[6]);
            const auto use_extended_id{false};
            std::vector<std::uint8_t> payload;
            payload.resize(data.size());
            std::transform(data.cbegin(),data.cend(),payload.begin(),[](const auto in){ return static_cast<std::uint8_t>(in);});
            id(wp_can).send_data(ESPClient.canId, use_extended_id, payload);
    - action: can_send_value
      variables:
        property: int
        target: string
        raw_value: int
      then:
        - lambda: |-
            Property mappedProperty(static_cast<std::uint16_t>(property));
            const auto value{static_cast<std::uint16_t>(raw_value)};
            if(const auto member = getCanMemberByName(target); member.has_value()) {
              ESP_LOGI("ACTION", "Sending value %d for property %s (0x%04x) to %s", value, std::string(mappedProperty.name).c_str(), mappedProperty.id, target.c_str());
              sendData(member.value(), mappedProperty, value);
            } else {
              ESP_LOGI("ACTION","No CanMember with name %s defined!", target.c_str());
            }

#########################################
#                                       #
#   Home Assistant Sensors              #
#                                       #
#########################################
sensor:
  - platform: homeassistant
    name: "Temperature Sensor From Home Assistant"
    entity_id: $entity_room_temperature
    on_value:
      then:
        - lambda: |-
            ESP_LOGI("SET", "Updating room temperature to %f", x);
            id(gRAUMISTTEMP) = x;

  - platform: homeassistant
    name: "Humidity Sensor From Home Assistant"
    entity_id: $entity_humidity
    on_value:
      then:
        - lambda: |-
            ESP_LOGI("SET", "Updating humidity to %f", x);
            id(gRAUMFEUCHTE) = x;

#########################################
#                                       #
#   Template Sensors                    #
#                                       #
#########################################
  - platform: template
    name: "COP WW TAG"
    update_interval: $interval_very_slow
    state_class: "measurement"
    filters:
      - median
    lambda: |-
      if (id(WAERMEERTRAG_WW_TAG_SUMME_KWH).state && id(EL_ENERGIEAUFNAHME_WW_SUMME_KWH).state && id(EL_ENERGIEAUFNAHME_WW_SUMME_KWH).state != 0.0f) {
        id(gCOP_WW_TAG) = id(WAERMEERTRAG_WW_TAG_SUMME_KWH).state / id(EL_ENERGIEAUFNAHME_WW_SUMME_KWH).state;
      }
      return id(gCOP_WW_TAG);
  - platform: template
    name: "COP HEIZ TAG"
    update_interval: $interval_very_slow
    state_class: "measurement"
    filters:
      - median
    lambda: |-
      if (id(WAERMEERTRAG_HEIZ_TAG_SUMME_KWH).state && id(EL_ENERGIEAUFNAHME_HEIZ_SUMME_KWH).state && id(EL_ENERGIEAUFNAHME_HEIZ_SUMME_KWH).state != 0.0f) {
        id(gCOP_HEIZ_TAG) = id(WAERMEERTRAG_HEIZ_TAG_SUMME_KWH).state / id(EL_ENERGIEAUFNAHME_HEIZ_SUMME_KWH).state;
      }
      return id(gCOP_HEIZ_TAG);

#########################################
#                                       #
#   CANbus configuration (ESP32-C6)     #
#                                       #
#########################################
canbus:
  - id: wp_can
    platform: esp32_can
    tx_pin: GPIO5
    rx_pin: GPIO4
    can_id: $espclient_can_id
    use_extended_id: false
    bit_rate: 20kbps
    on_frame:
    - can_id: 0
      can_id_mask: 0
      then:
        - lambda: |-
            ESP_LOGD("CAN", "Can message received with CANId 0x%04lx", can_id);
            const auto [property, value] = processCanMessage(x);
            const auto canMember = getCanMemberByCanId(can_id);
            if(canMember) {
              auto callback = CallbackHandler::instance().getCallback(std::make_pair(canMember->get(),property));
              callback(value);
            } else {
              ESP_LOGD("CAN", "No CANMember with CANId 0x%04lx available.", can_id);
            }
