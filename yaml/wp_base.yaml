esphome:
  includes:
    - src/custom_climate.h
  on_boot:
    priority: 100.0 # AFTER_CONNECTION
    then:
      - lambda: |-
          CallbackHandler::instance().addCallback(std::make_pair(Kessel,Property::kPASSIVE_COOLING),[](const SimpleVariant& value){
            const auto stringValue{Mapper::instance().getPassivkuehlung(value).value_or("Unbekannt")};
            const auto index = id(PASSIVE_COOLING).index_of(stringValue);
            if(index.has_value()) {
              id(PASSIVE_COOLING).publish_state(stringValue);
            }
          });
          scheduleRequest(Kessel, Property::kPASSIVE_COOLING, std::chrono::seconds(10));

          CallbackHandler::instance().addCallback(std::make_pair(Kessel,Property::kSUPPLY_AIR_ACTUAL),[](const SimpleVariant& value){
            // workaround for broken ninth bit of BETRIEBSSTATUS
            const auto zuluftIst = static_cast<std::uint16_t>(value);
            id(VENTILATION).publish_state(zuluftIst > 0U);
          });
          scheduleRequest(Kessel, Property::kSUPPLY_AIR_ACTUAL, std::chrono::seconds(10));

          CallbackHandler::instance().addCallbacks({std::make_pair(Kessel,Property::kEXHAUST_AIR_SETPOINT),
                                                    std::make_pair(Kessel,Property::kSUPPLY_AIR_SETPOINT)},
                                                    [](const SimpleVariant&) {
            const auto airflowIn{id(SUPPLY_AIR_SETPOINT).state};
            const auto airflowOut{id(EXHAUST_AIR_SETPOINT).state};
            auto getPower = [](const float airflow){
              if(airflow < 0.1f) {
                return 0.0f;
              }
              /* This equation is base on the following measurement:
               * airflow (l/min)       : 0 140 190 220 300
               * combined fan power (W): 0  30  50  80 170
               * @note: the last value is taken as from the THZ504 specification.
               */
              return (0.00005f * std::pow(airflow, 2.5f) + 3.0f);
            };
            id(FAN_POWER).publish_state(getPower(airflowIn) + getPower(airflowOut));
          });

          id(ELEKTRISCHE_NACHERWAERMUNG).add_on_state_callback([](const bool state){
            const auto electricHeatingPower = state ? id(NE_STUFE_WW).state * 230.0 /*V*/ * 12.6 /*A*/ : 0.0f;
            id(ELECTRIC_HEATING_POWER).publish_state(electricHeatingPower);
          });

          CallbackHandler::instance().addCallback(std::make_pair(Kessel,Property::kPROGRAMMSCHALTER),[](const SimpleVariant& value){
            const auto stringValue{value.get<std::string>()};
            const auto index = id(PROGRAMMSCHALTER).index_of(stringValue);
            if(index.has_value()) {
              id(PROGRAMMSCHALTER).publish_state(stringValue);
            }
          });
          scheduleRequest(Kessel, Property::kPROGRAMMSCHALTER, std::chrono::seconds(10));

          CallbackHandler::instance().addCallback(std::make_pair(Kessel,Property::kBETRIEBS_STATUS_2),[](const SimpleVariant& value){
            const std::bitset<2U> status_bits{static_cast<std::uint16_t>(value)};
            id(SUMMER_MODE_ACTIVE).publish_state(status_bits.test(0U));
            id(OFEN_KAMIN_AKTIV).publish_state(status_bits.test(1U));
          });
          scheduleRequest(Kessel, Property::kBETRIEBS_STATUS_2, std::chrono::seconds(10));

          CallbackHandler::instance().addCallback(std::make_pair(Kessel,Property::kBETRIEBS_STATUS),[](const SimpleVariant& value){
            const std::bitset<15U> status_bits{static_cast<std::uint16_t>(value)};
            id(SCHALTPROGRAMM_AKTIV).publish_state(status_bits.test(0U));
            id(COMPRESSOR).publish_state(status_bits.test(1U));
            id(HEATING).publish_state(status_bits.test(2U));
            id(COOLING).publish_state(status_bits.test(3U));
            id(DHW_HEATING).publish_state(status_bits.test(4U));
            id(ELEKTRISCHE_NACHERWAERMUNG).publish_state(status_bits.test(5U));
            id(SERVICE).publish_state(status_bits.test(6U));
            id(EVU_SPERRE).publish_state(status_bits.test(7U));
            id(FILTERWECHSEL_BEIDE).publish_state(status_bits.test(8U));
            // seems to be broken id(VENTILATION).publish_state(status_bits.test(9U));
            id(HEIZKREISPUMPE).publish_state(status_bits.test(10U));
            id(DEFROST_EVAPORATOR).publish_state(status_bits.test(11U));
            id(FILTERWECHSEL_ABLUFT).publish_state(status_bits.test(12U));
            id(FILTERWECHSEL_ZULUFT).publish_state(status_bits.test(13U));
            id(AUFHEIZPROGRAMM_AKTIV).publish_state(status_bits.test(14U));
          });
          scheduleRequest(Kessel, Property::kBETRIEBS_STATUS, std::chrono::seconds(10));

#########################################
#                                       #
#   Selects                             #
#                                       #
#########################################
select:
  - platform: template
    name: "PASSIVE_COOLING"
    id: PASSIVE_COOLING
    options:
      - "Aus"
      - "Ablüften"
      - "Zulüften"
      - "Bypass"
      - "Sommerkassette"
      - "Unbekannt"
    initial_option: "Unbekannt"
    optimistic: true
    setup_priority: 100
    set_action:
      then:
        - lambda: |-
            const auto passivkuehlungId = Mapper::instance().getPassivkuehlungId(x);
            if(passivkuehlungId.has_value()) {
              sendData(Kessel, Property::kPASSIVE_COOLING, passivkuehlungId.value());
            }

  - platform: template
    name: "PROGRAMMSCHALTER"
    id: PROGRAMMSCHALTER
    options:
      - "Notbetrieb"
      - "Bereitschaft"
      - "Automatik"
      - "Tagbetrieb"
      - "Absenkbetrieb"
      - "Warmwasser"
      - "Handbetrieb"
      - "Unbekannt"
    initial_option: "Unbekannt"
    optimistic: true
    setup_priority: 100
    set_action:
      then:
        - lambda: |-
            const auto betriebsartId = Mapper::instance().getBetriebsartId(x);
            if(betriebsartId.has_value()) {
              sendData(Kessel, Property::kPROGRAMMSCHALTER, betriebsartId.value());
            }

#########################################
#                                       #
#   Template Sensors                    #
#                                       #
#########################################
sensor:
  - platform: template
    name: "FAN POWER"
    id: FAN_POWER
    state_class: measurement
    device_class: power
    unit_of_measurement: "W"
  - platform: template
    name: "ELECTRIC HEATING POWER"
    id: ELECTRIC_HEATING_POWER
    state_class: measurement
    device_class: power
    unit_of_measurement: "W"

#########################################
#                                       #
#   Custom climates                     #
#                                       #
#########################################
external_components:
  - source: components

climate:
  - platform: custom
    lambda: |-
      auto heating = new Heating(id(ROOM_TEMP_ACTUAL),id(ROOM_TEMP_SETPOINT_DAY), id(HEATING), id(COOLING), id(VENTILATION), Property::kROOM_TEMP_SETPOINT_DAY, Property::kCOOLING_ROOM_SETPOINT_DAY);
      App.register_component(heating);
      return {heating};
    climates:
      name: "Heating Day"
      visual:
        min_temperature: 10.0
        max_temperature: 25.0
        temperature_step:
          target_temperature: 0.1
          current_temperature: 0.1

  - platform: custom
    lambda: |-
      auto heating = new Heating(id(ROOM_TEMP_ACTUAL),id(ROOM_TEMP_SETPOINT_NIGHT), id(HEATING), id(COOLING), id(VENTILATION), Property::kROOM_TEMP_SETPOINT_NIGHT, Property::kKUEHL_RAUMSOLL_NACHT);
      App.register_component(heating);
      return {heating};
    climates:
      name: "Heating Night"
      visual:
        min_temperature: 10.0
        max_temperature: 25.0
        temperature_step:
          target_temperature: 0.1
          current_temperature: 0.1

  - platform: custom
    lambda: |-
      auto hot_water = new HotWater(id(STORAGE_TEMP_ACTUAL),id(STORAGE_TEMP_SETPOINT_DAY), id(DHW_HEATING), Property::kSTORAGE_TEMP_SETPOINT_DAY);
      App.register_component(hot_water);
      return {hot_water};
    climates:
      name: "Hot Water Day"
      visual:
        min_temperature: 30.0
        max_temperature: 75.0
        temperature_step:
          target_temperature: 1.0
          current_temperature: 0.1

  - platform: custom
    lambda: |-
      auto hot_water = new HotWater(id(STORAGE_TEMP_ACTUAL),id(STORAGE_TEMP_SETPOINT_NIGHT), id(DHW_HEATING), Property::kSTORAGE_TEMP_SETPOINT_NIGHT);
      App.register_component(hot_water);
      return {hot_water};
    climates:
      name: "Hot Water Night"
      visual:
        min_temperature: 30.0
        max_temperature: 75.0
        temperature_step:
          target_temperature: 1.0
          current_temperature: 0.1

#########################################
#                                       #
#   Intervals                           #
#                                       #
#########################################
interval:
  - interval: $interval_once_in_a_while
    then:
    - lambda: |-
        queueRequest(Kessel, Property::kBETRIEBS_STATUS_2);

#########################################
#                                       #
#   Packages                            #
#                                       #
#########################################
packages:
  SCHALTPROGRAMM_AKTIV:                !include { file: wp_binary.yaml, vars: { name: "SCHALTPROGRAMM_AKTIV" }}
  COMPRESSOR:                          !include { file: wp_binary.yaml, vars: { name: "COMPRESSOR" }}
  DHW_HEATING:                         !include { file: wp_binary.yaml, vars: { name: "DHW_HEATING" }}
  ELEKTRISCHE_NACHERWAERMUNG:          !include { file: wp_binary.yaml, vars: { name: "ELEKTRISCHE_NACHERWAERMUNG" }}
  SERVICE:                             !include { file: wp_binary.yaml, vars: { name: "SERVICE" }}
  HEATING:                             !include { file: wp_binary.yaml, vars: { name: "HEATING" }}
  COOLING:                             !include { file: wp_binary.yaml, vars: { name: "COOLING" }}
  VENTILATION:                         !include { file: wp_binary.yaml, vars: { name: "VENTILATION" }}
  EVU_SPERRE:                          !include { file: wp_binary.yaml, vars: { name: "EVU_SPERRE" }}
  FILTERWECHSEL_BEIDE:                 !include { file: wp_binary.yaml, vars: { name: "FILTERWECHSEL_BEIDE" }}
  HEIZKREISPUMPE:                      !include { file: wp_binary.yaml, vars: { name: "HEIZKREISPUMPE" }}
  DEFROST_EVAPORATOR:                  !include { file: wp_binary.yaml, vars: { name: "DEFROST_EVAPORATOR" }}
  FILTERWECHSEL_ABLUFT:                !include { file: wp_binary.yaml, vars: { name: "FILTERWECHSEL_ABLUFT" }}
  FILTERWECHSEL_ZULUFT:                !include { file: wp_binary.yaml, vars: { name: "FILTERWECHSEL_ZULUFT" }}
  AUFHEIZPROGRAMM_AKTIV:               !include { file: wp_binary.yaml, vars: { name: "AUFHEIZPROGRAMM_AKTIV" }}
  SUMMER_MODE_ACTIVE:                  !include { file: wp_binary.yaml, vars: { name: "SUMMER_MODE_ACTIVE" }}
  OFEN_KAMIN_AKTIV:                    !include { file: wp_binary.yaml, vars: { name: "OFEN_KAMIN_AKTIV" }}

  EXHAUST_AIR_TEMP:                    !include { file: wp_temperature.yaml, vars: { property: "EXHAUST_AIR_TEMP"  }}
  STORAGE_TEMP_SETPOINT_DAY:           !include { file: wp_temperature.yaml, vars: { property: "STORAGE_TEMP_SETPOINT_DAY"   , writable: "true" }}
  STORAGE_TEMP_SETPOINT_NIGHT:         !include { file: wp_temperature.yaml, vars: { property: "STORAGE_TEMP_SETPOINT_NIGHT" , writable: "true" }}
  COLLECTOR_TEMP_ACTUAL:               !include { file: wp_temperature.yaml, vars: { property: "COLLECTOR_TEMP_ACTUAL"         , update_interval: $interval_medium }}
  DEWPOINT_HC1:                        !include { file: wp_temperature.yaml, vars: { property: "DEWPOINT_HC1"           , target: "HK1" }}
  ROOM_TEMP_SETPOINT_DAY:              !include { file: wp_temperature.yaml, vars: { property: "ROOM_TEMP_SETPOINT_DAY"       , target: "HK1" , writable: "true" }}
  ROOM_TEMP_SETPOINT_NIGHT:            !include { file: wp_temperature.yaml, vars: { property: "ROOM_TEMP_SETPOINT_NIGHT"     , target: "HK1" , writable: "true" }}
  COOLING_ROOM_SETPOINT_DAY:           !include { file: wp_temperature.yaml, vars: { property: "COOLING_ROOM_SETPOINT_DAY"     , target: "HK1" , writable: "true" }}
  EVAPORATOR_TEMP:                     !include { file: wp_temperature.yaml, vars: { property: "EVAPORATOR_TEMP"  }}

  VENT_LEVEL_DAY:                      !include { file: wp_ventilation.yaml, vars: { property: "VENT_LEVEL_DAY"     }}
  VENT_LEVEL_NIGHT:                    !include { file: wp_ventilation.yaml, vars: { property: "VENT_LEVEL_NIGHT"   }}
  VENT_LEVEL_PARTY:                    !include { file: wp_ventilation.yaml, vars: { property: "VENT_LEVEL_PARTY"   }}

  EXHAUST_AIR_HUMIDITY:                !include { file: wp_generic.yaml, vars: { property: "EXHAUST_AIR_HUMIDITY"            , update_interval: $interval_very_slow       , unit: "%"    , icon: "mdi:water-percent"}}
  MOTOR_CURRENT:                       !include { file: wp_generic.yaml, vars: { property: "MOTOR_CURRENT"            , update_interval: $interval_medium          , unit: "A"    , icon: "mdi:current-ac"}}
  MOTOR_VOLTAGE:                       !include { file: wp_generic.yaml, vars: { property: "MOTOR_VOLTAGE"            , update_interval: $interval_medium          , unit: "V"    , icon: "mdi:sine-wave"}}
  MOTOR_POWER:                         !include { file: wp_generic.yaml, vars: { property: "MOTOR_POWER"              , update_interval: $interval_medium          , unit: "kW"   , icon: "mdi:flash", accuracy_decimals: "2" }}
  COMPRESSOR_SPEED:                    !include { file: wp_generic.yaml, vars: { property: "COMPRESSOR_SPEED"         , update_interval: $interval_medium          , unit: "Hz"   , icon: "mdi:gauge" }}
  HEIZLEISTUNG_RELATIV:                !include { file: wp_generic.yaml, vars: { property: "HEIZLEISTUNG_RELATIV"     , update_interval: $interval_medium          , unit: "%"    , icon: "mdi:gauge" }}
  HEIZ_KUEHL_LEISTUNG:                 !include { file: wp_generic.yaml, vars: { property: "HEIZ_KUEHL_LEISTUNG"      , update_interval: $interval_medium          , unit: "kW"   , icon: "mdi:home-lightning-bolt-outline", accuracy_decimals: "2" }}
  EXHAUST_AIR_ACTUAL:                  !include { file: wp_generic.yaml, vars: { property: "EXHAUST_AIR_ACTUAL"               , update_interval: $interval_slow            , unit: "Hz"   , icon: "mdi:fan"   }}
  OUTDOOR_AIR_ACTUAL:                  !include { file: wp_generic.yaml, vars: { property: "OUTDOOR_AIR_ACTUAL"       , update_interval: $interval_slow            , unit: "Hz"   , icon: "mdi:fan"   }}
  SUPPLY_AIR_ACTUAL:                   !include { file: wp_generic.yaml, vars: { property: "SUPPLY_AIR_ACTUAL"        , update_interval: $interval_slow            , unit: "Hz"   , icon: "mdi:fan"   }}
  EXHAUST_AIR_SETPOINT:                !include { file: wp_generic.yaml, vars: { property: "EXHAUST_AIR_SETPOINT"     , update_interval: $interval_slow            , unit: "l/min", icon: "mdi:pump"  }}
  OUTDOOR_AIR_SETPOINT:                !include { file: wp_generic.yaml, vars: { property: "OUTDOOR_AIR_SETPOINT"     , update_interval: $interval_slow            , unit: "l/min", icon: "mdi:pump"  }}
  SUPPLY_AIR_SETPOINT:                 !include { file: wp_generic.yaml, vars: { property: "SUPPLY_AIR_SETPOINT"      , update_interval: $interval_slow            , unit: "l/min", icon: "mdi:pump"  }}
  VOLUME_FLOW:                         !include { file: wp_generic.yaml, vars: { property: "VOLUME_FLOW"              , update_interval: $interval_slow            , unit: "l/min", icon: "mdi:pump"  }}
  LAUFZEIT_FILTER:                     !include { file: wp_generic.yaml, vars: { property: "LAUFZEIT_FILTER"          , update_interval: $interval_once_in_a_while , unit: "%"    , icon: "mdi:calendar"  }}
  ANZEIGE_NIEDERDRUCK:                 !include { file: wp_generic.yaml, vars: { property: "ANZEIGE_NIEDERDRUCK"      , accuracy_decimals: "2" }}
  PUMPENZYKLEN_MIN_AUSSENT:            !include { file: wp_generic.yaml, vars: { property: "PUMPENZYKLEN_MIN_AUSSENT" , icon: "mdi:numeric"  }}
  SETPOINT_MAX_HC1:                    !include { file: wp_generic.yaml, vars: { property: "SETPOINT_MAX_HC1"          , unit: "°C", icon: "mdi:temperature-celsius" , target: "HK1", accuracy_decimals: "1" }}
  SETPOINT_MIN_HC1:                    !include { file: wp_generic.yaml, vars: { property: "SETPOINT_MIN_HC1"          , unit: "°C", icon: "mdi:temperature-celsius" , target: "HK1", accuracy_decimals: "1" }}
  FLOW_SHARE_HC1:                      !include { file: wp_generic.yaml, vars: { property: "FLOW_SHARE_HC1"            , unit: "%" , icon: "mdi:percent-box"         , target: "HK1" }}
  BASE_POINT_HC1:                      !include { file: wp_generic.yaml, vars: { property: "BASE_POINT_HC1"             , unit: "°C", icon: "mdi:temperature-celsius" , target: "HK1", accuracy_decimals: "1" }}

  NE_STUFE_WW:                         !include { file: wp_number.yaml, vars: { property: "NE_STUFE_WW"                , min: "0" , max: "3"  }}
  LEISTUNG_AUSLEGUNG_HEIZUNG:          !include { file: wp_number.yaml, vars: { property: "LEISTUNG_AUSLEGUNG_HEIZUNG" , min: "40", max: "100"}}
  LEISTUNG_AUSLEGUNG_KUEHLEN:          !include { file: wp_number.yaml, vars: { property: "LEISTUNG_AUSLEGUNG_KUEHLEN" , min: "30", max: "50" }}
  PUMPENDREHZAHL_HEIZEN:               !include { file: wp_number.yaml, vars: { property: "PUMPENDREHZAHL_HEIZEN"      , step: "0.1" }}
  HYSTERESE_WW:                        !include { file: wp_number.yaml, vars: { property: "HYSTERESE_WW"               , min: "2.0", max: "10.0", step: "0.1", unit: "°C" }}
  VENT_SUPPLY_LEVEL1:                  !include { file: wp_number.yaml, vars: { property: "VENT_SUPPLY_LEVEL1", min: "0.0", max: "300.0", unit: "m³/h", icon: "mdi:air-filter"  }}
  VENT_SUPPLY_LEVEL2:                  !include { file: wp_number.yaml, vars: { property: "VENT_SUPPLY_LEVEL2", min: "0.0", max: "300.0", unit: "m³/h", icon: "mdi:air-filter"  }}
  VENT_SUPPLY_LEVEL3:                  !include { file: wp_number.yaml, vars: { property: "VENT_SUPPLY_LEVEL3", min: "0.0", max: "300.0", unit: "m³/h", icon: "mdi:air-filter"  }}
  VENT_EXHAUST_LEVEL1:                 !include { file: wp_number.yaml, vars: { property: "VENT_EXHAUST_LEVEL1", min: "0.0", max: "300.0", unit: "m³/h", icon: "mdi:air-filter"  }}
  VENT_EXHAUST_LEVEL2:                 !include { file: wp_number.yaml, vars: { property: "VENT_EXHAUST_LEVEL2", min: "0.0", max: "300.0", unit: "m³/h", icon: "mdi:air-filter"  }}
  VENT_EXHAUST_LEVEL3:                 !include { file: wp_number.yaml, vars: { property: "VENT_EXHAUST_LEVEL3", min: "0.0", max: "300.0", unit: "m³/h", icon: "mdi:air-filter"  }}

  WAERMEERTRAG_RUECKGE_TAG_SUMME_KWH:  !include { file: wp_daily_energy_combined.yaml, vars: { sensor_name: "WAERMEERTRAG_RUECKGE_TAG_SUMME_KWH" , property_wh: "WAERMEERTRAG_RUECKGE_TAG_WH"  , property_kwh: "WAERMEERTRAG_RUECKGE_TAG_KWH"  }}
  WAERMEERTRAG_2WE_WW_TAG_SUMME_KWH:   !include { file: wp_daily_energy_combined.yaml, vars: { sensor_name: "WAERMEERTRAG_2WE_WW_TAG_SUMME_KWH"  , property_wh: "WAERMEERTRAG_2WE_WW_TAG_WH"   , property_kwh: "WAERMEERTRAG_2WE_WW_TAG_KWH"   }}
  WAERMEERTRAG_2WE_HEIZ_TAG_SUMME_KWH: !include { file: wp_daily_energy_combined.yaml, vars: { sensor_name: "WAERMEERTRAG_2WE_HEIZ_TAG_SUMME_KWH", property_wh: "WAERMEERTRAG_2WE_HEIZ_TAG_WH" , property_kwh: "WAERMEERTRAG_2WE_HEIZ_TAG_KWH" }}

  WAERMEERTRAG_RUECKGE_SUMME_MWH:      !include { file: wp_generic_combined.yaml, vars: { sensor_name: "WAERMEERTRAG_RUECKGE_SUMME_MWH"  , scaled_property: "WAERMEERTRAG_RUECKGE_SUM_KWH" , property: "WAERMEERTRAG_RUECKGE_SUM_MWH" , unit: "MWh", accuracy_decimals: "3", icon: "mdi:fire"  }}
  WAERMEERTRAG_2WE_WW_SUMME_MWH:       !include { file: wp_generic_combined.yaml, vars: { sensor_name: "WAERMEERTRAG_2WE_WW_SUMME_MWH"   , scaled_property: "WAERMEERTRAG_2WE_WW_SUM_KWH"  , property: "WAERMEERTRAG_2WE_WW_SUM_MWH"  , unit: "MWh", accuracy_decimals: "3", icon: "mdi:fire"  }}
  WAERMEERTRAG_2WE_HEIZ_SUMME_MWH:     !include { file: wp_generic_combined.yaml, vars: { sensor_name: "WAERMEERTRAG_2WE_HEIZ_SUMME_MWH" , scaled_property: "WAERMEERTRAG_2WE_HEIZ_SUM_KWH", property: "WAERMEERTRAG_2WE_HEIZ_SUM_MWH", unit: "MWh", accuracy_decimals: "3", icon: "mdi:fire"  }}

  DHW_ECO:                             !include { file: wp_switch.yaml, vars: { property: "DHW_ECO", icon: "mdi:sprout" }}
  COOLING_MODE:                        !include { file: wp_switch.yaml, vars: { property: "COOLING_MODE" , target: "HK1" }}

  # Additional sensors originally from common.yaml to avoid duplicates
  COMPRESSOR_STARTS:                   !include { file: wp_generic_combined.yaml, vars: { sensor_name: "COMPRESSOR_STARTS"           , scaled_property: "VERDICHTER_STARTS_K"       , property: "COMPRESSOR_STARTS"         , unit: ""   , accuracy_decimals: "0", scaler: "1000", icon: "mdi:counter" }}
  WAERMEERTRAG_WW_SUMME_MWH:           !include { file: wp_generic_combined.yaml, vars: { sensor_name: "WAERMEERTRAG_WW_SUMME_MWH"   , scaled_property: "WAERMEERTRAG_WW_SUM_KWH"   , property: "WAERMEERTRAG_WW_SUM_MWH"   , unit: "MWh", accuracy_decimals: "3", icon: "mdi:fire" }}
  WAERMEERTRAG_HEIZ_SUMME_MWH:         !include { file: wp_generic_combined.yaml, vars: { sensor_name: "WAERMEERTRAG_HEIZ_SUMME_MWH" , scaled_property: "WAERMEERTRAG_HEIZ_SUM_KWH" , property: "WAERMEERTRAG_HEIZ_SUM_MWH" , unit: "MWh", accuracy_decimals: "3", icon: "mdi:fire" }}

  STORAGE_TEMP_SETPOINT:               !include { file: wp_temperature.yaml, vars: { property: "STORAGE_TEMP_SETPOINT"          }}
  STORAGE_TEMP_ACTUAL:                 !include { file: wp_temperature.yaml, vars: { property: "STORAGE_TEMP_ACTUAL"      , update_interval: $interval_medium }}
  OUTSIDE_TEMP:                        !include { file: wp_temperature.yaml, vars: { property: "OUTSIDE_TEMP"     }}
  RETURN_TEMP_ACTUAL:                  !include { file: wp_temperature.yaml, vars: { property: "RETURN_TEMP_ACTUAL"       , update_interval: $interval_medium }}
  FLOW_TEMP_ACTUAL:                    !include { file: wp_temperature.yaml, vars: { property: "FLOW_TEMP_ACTUAL"         , update_interval: $interval_medium, target: "HK1" }}
  ROOM_TEMP_ACTUAL:                    !include { file: wp_temperature.yaml, vars: { property: "ROOM_TEMP_ACTUAL"              , target: "HK1" }}
  ADJUSTED_ROOM_TEMP_SETPOINT:         !include { file: wp_temperature.yaml, vars: { property: "ADJUSTED_ROOM_TEMP_SETPOINT"  , target: "HK1" }}
  FLOW_TEMP_SETPOINT:                  !include { file: wp_temperature.yaml, vars: { property: "FLOW_TEMP_SETPOINT"          , target: "HK1" }}

  FEHLERMELDUNG:                       !include { file: wp_generic.yaml, vars: { property: "FEHLERMELDUNG"      , icon: "mdi:alert-circle" }}
  ROOM_HUMIDITY:                       !include { file: wp_generic.yaml, vars: { property: "ROOM_HUMIDITY"        , interval: $interval_very_slow, unit: "%", icon: "mdi:water-percent", target: "HK1", accuracy_decimals: "1" }}
  SLOPE_HC1:                           !include { file: wp_generic.yaml, vars: { property: "SLOPE_HC1"            , icon: "mdi:valve", target: "HK1", accuracy_decimals: "2" }}

  RAUMEINFLUSS:                        !include { file: wp_number.yaml, vars: { property: "RAUMEINFLUSS", target: "HK1" }}

  EL_ENERGIEAUFNAHME_WW_SUMME_KWH:     !include { file: wp_daily_energy_combined.yaml, vars: { sensor_name: "EL_ENERGIEAUFNAHME_WW_SUMME_KWH"   , property_wh: "EL_ENERGIEAUFNAHME_WW_TAG_WH"   , property_kwh: "EL_ENERGIEAUFNAHME_WW_TAG_KWH"   }}
  EL_ENERGIEAUFNAHME_HEIZ_SUMME_KWH:   !include { file: wp_daily_energy_combined.yaml, vars: { sensor_name: "EL_ENERGIEAUFNAHME_HEIZ_SUMME_KWH" , property_wh: "EL_ENERGIEAUFNAHME_HEIZ_TAG_WH" , property_kwh: "EL_ENERGIEAUFNAHME_HEIZ_TAG_KWH" }}
  WAERMEERTRAG_WW_TAG_SUMME_KWH:       !include { file: wp_daily_energy_combined.yaml, vars: { sensor_name: "WAERMEERTRAG_WW_TAG_SUMME_KWH"     , property_wh: "WAERMEERTRAG_WW_TAG_WH"         , property_kwh: "WAERMEERTRAG_WW_TAG_KWH"         }}
  WAERMEERTRAG_HEIZ_TAG_SUMME_KWH:     !include { file: wp_daily_energy_combined.yaml, vars: { sensor_name: "WAERMEERTRAG_HEIZ_TAG_SUMME_KWH"   , property_wh: "WAERMEERTRAG_HEIZ_TAG_WH"       , property_kwh: "WAERMEERTRAG_HEIZ_TAG_KWH"       }}

  HEATPUMP_DATETIME:                   !include { file: wp_datetime.yaml }
